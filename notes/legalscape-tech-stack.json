{"title":"リーガルリサーチシステム「Legalscape」の技術スタック2021","date":"2021-12-02T00:00:00.000Z","tags":["advent"],"slug":"legalscape-tech-stack","html":"<p>こんにちは。Legalscape Co-Founder &amp; CTOの城戸（きど）です。\nこの記事は<a href=\"https://qiita.com/advent-calendar/2021/legalscape\">Legalscape アドベントカレンダー 2021</a>の2日目のエントリです。</p>\n<p>今日は私たちの主力プロダクトである「Legalscape」を支える技術スタックについて簡単に説明し、なぜそれを選んだのかを語ることで、これを読んでいるあなたに私たちのチームについて理解を深めていただきたいと思います。</p>\n<h1>Legalscapeって、何？</h1>\n<p>Legalscapeは、法務に携わる方々が使うリサーチシステムです。どんな製品なのかについては弊社ブログの過去の記事（<a href=\"https://note.com/legalscape/n/n673bf813e198\">はじめまして、Legalscapeです</a>）を見ていただきたいのですが、簡単に言うとWebアプリなので、バックエンド、フロントエンドからなり、裏に検索エンジンやデータベースがあります。これらが全て<strong>Google Cloud Platform</strong> (GCP) 上で構築されています。</p>\n<p>では、それぞれのコンポーネントについて詳しく見ていきましょう。</p>\n<h1>バックエンド</h1>\n<p>LegalscapeのAPIサーバは<strong>TypeScript</strong>で書かれています。確かにそこまでメジャーな選択肢ではありませんが、フロントエンドと型定義などを共通化できますし、TypeScriptの型システムは現実の問題を解くのにちょうど良くできていると感じています（ちゃんと書けばですが）。近年では<a href=\"https://github.com/frouriojs/frourio\">frourio</a>などフロントエンドとバックエンドを融合するフレームワークなども出現していますし、方向性は間違っていないのではないかなと思っています。</p>\n<p>併せて、<strong>OpenAPI</strong>を使ったスキーマファースト開発っぽいことをしています。具体的には、<a href=\"https://github.com/cdimascio/express-openapi-validator\">express-openapi-validator</a>を使ってAPI定義と具体的な実装を繋ぎこみ、リクエストパラメータがスキーマに従っていることを自動的に検証させたり、<strong>Jest</strong>と<strong>ajv</strong>を組み合わせて使ってAPIレスポンスがOpenAPIドキュメントに定義されたスキーマに従っていることを検証しています。Jestは導入を検討したときから業界的に主流のテスティングフレームワークですし、ユニットテスト初心者でも比較的書きやすいような気がします。</p>\n<p>APIサーバは、GCPの<strong>Google App Engine</strong>上で動かしています。デプロイも簡潔ですし使いやすいです。今のLegalscapeの規模だとみんな大好きKubernetesなどを使って問題を複雑に解く必要はないと思います。</p>\n<p>全文検索エンジンには<strong>Elasticsearch</strong>を採用しました。ひたすら試行錯誤を重ねてちょっとずつちょっとずつ最適化されてきていますが、まだまだチューニングの余地があるのだと思います。こういうの好きな人、うちに来てくれないかなー。楽しいと思うんですけど。</p>\n<h1>フロントエンド</h1>\n<p>当然、フロントエンドもTypeScriptで書かれています。フロントエンドフレームワークには<strong>Nuxt.js</strong> (Vue.js) を採用しました。Vueは優れた学習曲線を持つフレームワークだと思います。パフォーマンス的にも遜色ないのではないでしょうか。</p>\n<p>通信部分はもともとそんなに多くなかったこともあり直接レポジトリ層からAxiosを呼び出したりしていましたが、前述のOpenAPIによる自動生成されたコードで徐々に置き換えています。</p>\n<p>エンジニアの数も少なくコンポーネントの種類も多くはないためそこまで重要視してはいませんが、アイコンやボタンなどの一部の共有コンポーネントは<strong>Storybook</strong>で管理しています。サーブには<strong>Chromatic</strong>を利用して、mainブランチが更新されるたびにCIでデプロイがされるようになっています。これまでのコンポーネントの変更が時系列で見ることができて、実際のStorybookとの行き来も自由にできるので、エンジニアでも気軽に使えて全体が把握しやすくなっています。</p>\n<p>フロントエンドは、<strong>Firebase Hosting</strong>上でサーブしています。人手によるデプロイの場合もCDの場合もツールがきちんと整備されていて楽です。Google Cloud Storageから直接サーブすることも検討したのですが、SPAとの相性の観点でFirebase Hostingに軍配が上がりました。</p>\n<h1>DWH</h1>\n<p>DWHとして<strong>BigQuery</strong>を利用しています。APIサーバから<strong>Cloud Logging</strong>を経由してログを取り込んでいます。（取り扱うデータの規模によりますが）低コストでデータウェアハウスを構築できるのはいいですね。こちらについては12/14公開予定の記事で詳しく紹介しようと思いますので、乞うご期待。</p>\n<h1>その他（開発体験、運用）</h1>\n<p>先述の通りLegalscapeはGCP上で稼働していますが、VMやLBなど各種リソースをできる限り<strong>Terraform</strong>のコンフィギュレーションで表現しています。現状のリソース構成がどのようになっているかを把握しやすいですし、変更するときもレビューしやすいです。こちらについても12/9公開予定の記事で詳しく紹介しようと思います。</p>\n<p>CI/CDは<strong>GitHub Actions</strong>を活用しています。色々なactionsを組み合わせることでワークフローを作れるのが便利です。社内のCI/CD環境はかなり良く整備されていて、stageリリース、canaryリリース、productionリリースなどがストレスなく簡単に自動で行えます。</p>\n<p>システムの監視にはGCPの<strong>Cloud Monitoring</strong>を使っています。当たり前ですが、GCPの各種サービスとの相性が良く、監視エージェントなどを導入しなくても勝手にメトリクスを収集できる強みがあります。</p>\n<h1>終わりに</h1>\n<p>Legalscapeを支える技術スタックについて、駆け足ではありますが紹介していきました。他にも私たちはこの国の裁判のあり方を変える民事判決のオープンデータ化のプロジェクト（<a href=\"https://note.com/legalscape/n/n4dfbed9f1b38\">「民事判決のオープンデータ化」とは何で、なぜ必要で、なぜ私たちが関わっているのか</a>）のための実験環境だったり、またLegalscapeに掲載されるデータに対するたくさんの（！）アノテーションツールだったり、色々なシステムを抱えていますが、全部は語りきれません。</p>\n<p>この記事を読んで私たちのチームでの開発に興味が湧いた方や、もっと詳しく聞きたい！　という方は、ぜひ<a href=\"https://legalscape.notion.site/09aeb478072946c18249495b8fb63fcd\">採用情報</a>をご覧ください！　カジュアル面談からでも大丈夫ですので、気軽にご連絡いただけるのをお待ちしております。</p>\n","headline":"こんにちは。Legalscape Co-Founder & CTOの城戸（きど）です。 この記事は[Legalscape アドベントカレンダー 2021](https://qiita.com/adv"}