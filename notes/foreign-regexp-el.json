{"from":"wordpress","title":"Emacs: re-builder + foreign-regexp.elでたのしい正規表現","date":"2014-12-19T23:30:53.000Z","tags":["advent"],"slug":"foreign-regexp-el","html":"<p>この記事は<a href=\"http://qiita.com/advent-calendar/2014/emacs\">Emacs Advent Calendar 2014</a>の第20日目の記事として書かれました．\n第19日目はkawabata@githubさんによる「Emacs Lispの汎変数（とその他）」でした．\n第21日目はsanryuuさんによる自作ツールの紹介の予定です．</p>\n<!--more-->\n<h3>イントロダクション</h3>\n<p>こんばんは．Emacsのお話をします．わたし自身あまりEmacsのさまざまな機能を使いこなせていないのでそういう読者を想定して書きます．</p>\n<p>Emacsに限らずエディタで何らかのファイルを編集していると，たいていの場合正規表現による検索や置換が欲しくなります．\nそしてEmacsには<code>re-builder</code>という素晴らしい機能があります．</p>\n<img src=\"/images/uploads/2014/12/Screen-Shot-2014-12-19-at-9.44.09-PM.png\" width=\"582\" height=\"533\" class=\"alignnone size-full wp-image-184\" data-wp-pid=\"184\" />\n<p>これは正規表現クエリを書きながら，リアルタイムでそれにマッチする部分を確認出来るという便利なツールです．\nしかし，Emacsの正規表現は御存知の通り少し面倒くさいです．というか結構面倒くさいです．\n上のクエリは</p>\n<pre><code class=\"hljs\">&quot;^\\\\s-+&lt;li&gt;\\\\(.*\\\\)&lt;/li&gt;&quot;\n</code></pre>\n<p>ですが，これだけの長さの中にバックスラッシュが6回も出て来ます．\nもちろんEmacs Lispを書くときにはコード中にEmacsの正規表現を書くはめになるわけですがあまり気の進む作業ではありません（個人の感想です）．\nたいてい一発でうまくいかなくて適当にバックスラッシュを足したり引いたりするはめになります（個人の感想です）．\nここでPerl互換の正規表現が使えたら便利なわけです（若い方は耳慣れないかもしれませんがPerl互換のというのは正規表現につく枕詞です）．\nそんな流れで今日紹介するのがforeign-regexp.elです．</p>\n<h3>foreign-regexp.elの導入</h3>\n<p>というわけでforeign-regexp.elを導入してみましょう．\n<a href=\"https://github.com/k-talo/foreign-regexp.el\">https://github.com/k-talo/foreign-regexp.el</a>からforeign-regexp.elを入手し，パスの通った場所におきます（動かすだけなら他のファイルは無くとも問題ないようです）．\nそして<code>.emacs</code>に</p>\n<pre><code class=\"hljs\">(require 'foreign-regexp)\n\n(custom-set-variables\n'(foreign-regexp/regexp-type 'perl) ;; Choose your taste of foreign regexp\n                                    ;; from 'perl, 'ruby or 'javascript.\n'(reb-re-syntax 'foreign-regexp))   ;; Tell re-builder to use foreign regex.\n</code></pre>\n<p>と追加します．このコードで，foreign-regexp.elで使う正規表現をPerl, Ruby, JavaScript (node.js)から選んで指定し，re-builderで用いる正規表現も変更しています．\n<code>autoload</code>で書きたい場合は<code>re-builder</code>か<code>foreign-regexp/re-builder/query-replace-on-target-buffer</code>に張ればいいでしょう（私はそうしています）．</p>\n<p>これだけです．簡単ですね．</p>\n<h3>つかってみる</h3>\n<p>あとはそんなに覚えるべきキーバインドも多くはないのですが……一応ひと通り使ってみましょう．\nまず<kbd>M-s M-l</kbd>で<code>re-builder</code>を呼び出します．キャンセルして終了するときは<kbd>C-c C-q</kbd>です．\nそして<code><em>RE-Builder</em></code>バッファで置換前にマッチする正規表現を入力します．</p>\n<img src=\"/images/uploads/2014/12/regex-fig-02.gif\" width=\"555\" height=\"525\" class=\"alignnone size-full wp-image-192\" data-wp-pid=\"192\" />\n<p>完成したらこのままこれを置換クエリに持って行きましょう．\nこのバッファがアクティブなまま<code>foreign-regexp/re-builder/query-replace-on-target-buffer</code>を呼び出すと置換クエリにそのまま渡せます．\nキーバインドは<kbd>M-s M-%</kbd>です．</p>\n<img src=\"/images/uploads/2014/12/regex-fig-03.gif\" width=\"555\" height=\"525\" class=\"alignnone size-full wp-image-194\" data-wp-pid=\"194\" />\n<p>今はPerlの正規表現なので<a href=\"https://github.com/vim-jp/vimdoc-ja/issues/57#issuecomment-5841203\">後方参照（前方参照）</a>も<code>$1</code>でしたね．あとは<kbd>y</kbd>または<kbd>n</kbd>で一つ一つの置換候補を実際に置き換えるか決定します．\n一括で全て置き換える場合は<kbd>!</kbd>です．</p>\n<img src=\"/images/uploads/2014/12/regex-fig-04.gif\" width=\"555\" height=\"525\" class=\"alignnone size-full wp-image-195\" data-wp-pid=\"195\" />\n<p>簡単でしたね．\n嘆くらくはEmacs 24.4でforeign-regexp.elを使おうとすると</p>\n<pre><code class=\"hljs\">Wrong type argument: commandp, ad-Orig-foreign-regexp/query-replace\n</code></pre>\n<p>と怒られて使えないことくらいでしょうか．ちょっと対処できるか頑張ってみましたが敗退してEmacs 24.3を使うことで対処しています．かなしい．</p>\n<p>とはいえ今のは単純な例だったのでmultiple-cursors.elとか使えよ！とかそういう気もしますが，実際正規表現置換は使うので入れておくといざというときに便利です．\nあとはvisual-regexp.elとかpcre2el.elとかも面白そうですよね．</p>\n<p>何かあればコメント欄にくださいますと嬉しいです．\nそれでは．</p>\n","headline":"この記事は<a href=\"http://qiita.com/advent-calendar/2014/emacs\">Emacs Advent Calendar 2014</a>の第20日目の記事とし"}