{"type":"data","nodes":[null,{"type":"data","data":[{"entity":1},{"name":2,"nameSegmented":3,"kind":6,"urlPath":7,"historyURL":8,"lastModified":9,"attributes":10,"tags":15,"body":19,"headline":20,"links":21,"isEmpty":51},"Emacs: re-builder + foreign-regexp.elでたのしい正規表現",[4,5],"Emacs: re-builder + foreign-regexp.elでたのしい","正規表現","note","/notes/foreign-regexp-el","https://github.com/kissge/yo.eki.do/commits/master/notes/foreign-regexp-el.md",["Date","2022-06-11T07:52:23.000Z"],{"from":11,"title":2,"date":12,"tags":13},"wordpress",["Date","2014-12-19T23:30:53.000Z"],[14],"アドベントカレンダー",[16],{"name":14,"kind":17,"urlPath":18},"tag","/mono/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC","\u003Cp>この記事は\u003Ca href=\"http://qiita.com/advent-calendar/2014/emacs\">Emacs Advent Calendar 2014\u003C/a>の第20日目の記事として書かれました．第19日目はkawabata@githubさんによる「Emacs Lispの汎変数（とその他）」でした．第21日目はsanryuuさんによる自作ツールの紹介の予定です．\u003C/p>\n\u003C!--more-->\n\n\u003Ch3 id=\"イントロダクション\">イントロダクション\u003C/h3>\n\u003Cp>こんばんは．Emacsのお話をします．わたし自身あまりEmacsのさまざまな機能を使いこなせていないのでそういう読者を想定して書きます．\u003C/p>\n\u003Cp>Emacsに限らずエディタで何らかのファイルを編集していると，たいていの場合正規表現による検索や置換が欲しくなります．そしてEmacsには\u003Ccode>re-builder\u003C/code>という素晴らしい機能があります．\u003C/p>\n\u003Cimg src=\"/images/uploads/2014/12/Screen-Shot-2014-12-19-at-9.44.09-PM.png\" width=\"582\" height=\"533\" class=\"alignnone size-full wp-image-184\" data-wp-pid=\"184\" />\n\n\u003Cp>これは正規表現クエリを書きながら，リアルタイムでそれにマッチする部分を確認出来るという便利なツールです．しかし，Emacsの正規表現は御存知の通り少し面倒くさいです．というか結構面倒くさいです．上のクエリは\u003C/p>\n\u003Cpre>\u003Ccode>&quot;^\\\\s-+&lt;li&gt;\\\\(.*\\\\)&lt;/li&gt;&quot;\n\u003C/code>\u003C/pre>\n\u003Cp>ですが，これだけの長さの中にバックスラッシュが6回も出て来ます．もちろんEmacs Lispを書くときにはコード中にEmacsの正規表現を書くはめになるわけですがあまり気の進む作業ではありません（個人の感想です）．たいてい一発でうまくいかなくて適当にバックスラッシュを足したり引いたりするはめになります（個人の感想です）．ここでPerl互換の正規表現が使えたら便利なわけです（若い方は耳慣れないかもしれませんがPerl互換のというのは正規表現につく枕詞です）．そんな流れで今日紹介するのがforeign-regexp.elです．\u003C/p>\n\u003Ch3 id=\"foreign-regexpelの導入\">foreign-regexp.elの導入\u003C/h3>\n\u003Cp>というわけでforeign-regexp.elを導入してみましょう．\u003Ca href=\"https://github.com/k-talo/foreign-regexp.el\">https://github.com/k-talo/foreign-regexp.el\u003C/a>からforeign-regexp.elを入手し，パスの通った場所におきます（動かすだけなら他のファイルは無くとも問題ないようです）．そして\u003Ccode>.emacs\u003C/code>に\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-lisp\">(\u003Cspan class=\"hljs-name\">require\u003C/span> &#x27;foreign-regexp)\n\n(\u003Cspan class=\"hljs-name\">custom-set-variables\u003C/span>\n&#x27;(foreign-regexp/regexp-type &#x27;perl) \u003Cspan class=\"hljs-comment\">;; Choose your taste of foreign regexp\u003C/span>\n                                    \u003Cspan class=\"hljs-comment\">;; from &#x27;perl, &#x27;ruby or &#x27;javascript.\u003C/span>\n&#x27;(reb-re-syntax &#x27;foreign-regexp))   \u003Cspan class=\"hljs-comment\">;; Tell re-builder to use foreign regex.\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>と追加します．このコードで，foreign-regexp.elで使う正規表現をPerl, Ruby, JavaScript (node.js)から選んで指定し，re-builderで用いる正規表現も変更しています．\u003Ccode>autoload\u003C/code>で書きたい場合は\u003Ccode>re-builder\u003C/code>か\u003Ccode>foreign-regexp/re-builder/query-replace-on-target-buffer\u003C/code>に張ればいいでしょう（私はそうしています）．\u003C/p>\n\u003Cp>これだけです．簡単ですね．\u003C/p>\n\u003Ch3 id=\"つかってみる\">つかってみる\u003C/h3>\n\u003Cp>あとはそんなに覚えるべきキーバインドも多くはないのですが……一応ひと通り使ってみましょう．まず\u003Ckbd>M-s M-l\u003C/kbd>で\u003Ccode>re-builder\u003C/code>を呼び出します．キャンセルして終了するときは\u003Ckbd>C-c C-q\u003C/kbd>です．そして \u003Ccode>*RE-Builder*\u003C/code> バッファで置換前にマッチする正規表現を入力します．\u003C/p>\n\u003Cimg src=\"/images/uploads/2014/12/regex-fig-02.gif\" width=\"555\" height=\"525\" class=\"alignnone size-full wp-image-192\" data-wp-pid=\"192\" />\n\n\u003Cp>完成したらこのままこれを置換クエリに持って行きましょう．このバッファがアクティブなまま\u003Ccode>foreign-regexp/re-builder/query-replace-on-target-buffer\u003C/code>を呼び出すと置換クエリにそのまま渡せます．キーバインドは\u003Ckbd>M-s M-%\u003C/kbd>です．\u003C/p>\n\u003Cimg src=\"/images/uploads/2014/12/regex-fig-03.gif\" width=\"555\" height=\"525\" class=\"alignnone size-full wp-image-194\" data-wp-pid=\"194\" />\n\n\u003Cp>今はPerlの正規表現なので\u003Ca href=\"https://github.com/vim-jp/vimdoc-ja/issues/57#issuecomment-5841203\">後方参照（前方参照）\u003C/a>も\u003Ccode>$1\u003C/code>でしたね．あとは\u003Ckbd>y\u003C/kbd>または\u003Ckbd>n\u003C/kbd>で一つ一つの置換候補を実際に置き換えるか決定します．一括で全て置き換える場合は\u003Ckbd>!\u003C/kbd>です．\u003C/p>\n\u003Cimg src=\"/images/uploads/2014/12/regex-fig-04.gif\" width=\"555\" height=\"525\" class=\"alignnone size-full wp-image-195\" data-wp-pid=\"195\" />\n\n\u003Cp>簡単でしたね．嘆くらくはEmacs 24.4でforeign-regexp.elを使おうとすると\u003C/p>\n\u003Cpre>\u003Ccode>Wrong type argument: commandp, ad-Orig-foreign-regexp/query-replace\n\u003C/code>\u003C/pre>\n\u003Cp>と怒られて使えないことくらいでしょうか．ちょっと対処できるか頑張ってみましたが敗退してEmacs 24.3を使うことで対処しています．かなしい．\u003C/p>\n\u003Cp>とはいえ今のは単純な例だったのでmultiple-cursors.elとか使えよ！とかそういう気もしますが，実際正規表現置換は使うので入れておくといざというときに便利です．あとはvisual-regexp.elとかpcre2el.elとかも面白そうですよね．\u003C/p>\n\u003Cp>何かあればコメント欄にくださいますと嬉しいです．それでは．\u003C/p>\n","この記事はEmacs Advent Calendar 2014の第20日目の記事として書かれました．第19日目はkawabata@githubさんによる「Emacs Lispの汎変数（とその他）」でした．第21日目はsanryuuさんによる自作ツールの紹介の予定です．イントロダクションこんばんは．Emacsのお話をします．わたし自身あまりEmacsのさまざまな機能を使いこなせていないのでそういう読者を想定して書きます．Emacsに限らずエディタで何らかのファイルを編集していると，たいていの場合正規表現による検索や置換が欲しくなります．そしてEmacsにはre-builderという素晴らしい機能があります．これは正規表現クエリを書きながら，リアルタイムでそれにマッチする部分を確認出来るという便利なツールです．しかし，Emacsの正規表現は御存知の通り少し面倒くさいです．というか結構面倒くさいです．上のクエリは&quot;^\\\\s-+&lt;li&gt;\\\\(.*\\\\)&lt;/li&gt;&quot;ですが，これだけの長さの中にバックスラッシュが6回も出て来ます．もちろんEmacs Lispを書くときにはコード",{"to":22,"from":28,"kind":30,"one_hop_アドベントカレンダー":32},{"urlPath":7,"entities":23},[24],{"name":14,"nameSegmented":25,"kind":17,"urlPath":18,"tags":26,"isEmpty":27},[14],[],true,{"urlPath":7,"entities":29},[],{"urlPath":7,"entities":31},[],{"urlPath":18,"entities":33},[34,52,66,82,96],{"name":35,"nameSegmented":36,"kind":6,"urlPath":40,"historyURL":41,"lastModified":42,"attributes":43,"tags":47,"isEmpty":51},"PDFと、出版社と、私",[37,38,39],"PDFと、","出版社と、","私","/notes/pdf-publisher-and-me","https://github.com/kissge/yo.eki.do/commits/master/notes/pdf-publisher-and-me.md",["Date","2022-09-04T05:58:48.000Z"],{"title":35,"date":44,"tags":45},["Date","2021-12-23T05:00:00.000Z"],[14,46],"LegalTech",[48,49],{"name":14,"kind":17,"urlPath":18},{"name":46,"kind":17,"urlPath":50},"/mono/LegalTech",false,{"name":53,"nameSegmented":54,"kind":6,"urlPath":58,"historyURL":59,"lastModified":60,"attributes":61,"tags":64,"isEmpty":51},"リーガルリサーチシステム「Legalscape」の技術スタック2021",[55,56,57],"リーガルリサーチシステム","「Legalscape」の","技術スタック2021","/notes/legalscape-tech-stack","https://github.com/kissge/yo.eki.do/commits/master/notes/legalscape-tech-stack.md",["Date","2022-06-11T07:33:39.000Z"],{"title":53,"date":62,"tags":63},["Date","2021-12-02T00:00:00.000Z"],[14],[65],{"name":14,"kind":17,"urlPath":18},{"name":67,"nameSegmented":68,"kind":6,"urlPath":74,"historyURL":75,"lastModified":76,"attributes":77,"tags":80,"isEmpty":51},"来年こそは届いてほしいスマートグラス「Vue」",[69,70,71,72,73],"来年こそは","届いて","ほしい","スマートグラス","「Vue」","/notes/crowdfunding-vue","https://github.com/kissge/yo.eki.do/commits/master/notes/crowdfunding-vue.md",["Date","2022-06-11T07:34:19.000Z"],{"from":11,"title":67,"date":78,"tags":79},["Date","2018-12-13T00:17:07.000Z"],[14],[81],{"name":14,"kind":17,"urlPath":18},{"name":83,"nameSegmented":84,"kind":6,"urlPath":88,"historyURL":89,"lastModified":90,"attributes":91,"tags":94,"isEmpty":51},"Emacs: Windowsでやっていく2017",[85,86,87],"Emacs: Windowsで","やっていく","2017","/notes/emacs-windows-2017","https://github.com/kissge/yo.eki.do/commits/master/notes/emacs-windows-2017.md",["Date","2022-07-02T05:00:46.000Z"],{"from":11,"title":83,"date":92,"tags":93},["Date","2017-12-08T00:00:08.000Z"],[14],[95],{"name":14,"kind":17,"urlPath":18},{"name":97,"nameSegmented":98,"kind":6,"urlPath":101,"historyURL":102,"lastModified":103,"attributes":104,"tags":107,"isEmpty":51},"Emacs: まだターミナルで消耗してるの？",[99,100],"Emacs: まだターミナルで","消耗してるの？","/notes/tramp-mode","https://github.com/kissge/yo.eki.do/commits/master/notes/tramp-mode.md",["Date","2022-06-11T07:33:39.000Z"],{"from":11,"title":97,"date":105,"tags":106},["Date","2015-12-04T23:00:02.000Z"],[14],[108],{"name":14,"kind":17,"urlPath":18}],"uses":{"url":1}}]}
