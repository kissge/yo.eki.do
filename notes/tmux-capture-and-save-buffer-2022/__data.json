{"type":"data","nodes":[null,{"type":"data","data":[{"entity":1},{"name":2,"nameSegmented":3,"kind":8,"urlPath":9,"historyURL":10,"lastModified":11,"attributes":12,"tags":14,"body":15,"headline":16,"links":17,"isEmpty":32},"tmux: pane の表示内容をファイルに書き出す 2022",[4,5,6,7],"tmux: pane の","表示内容を","ファイルに","書き出す 2022","note","/notes/tmux-capture-and-save-buffer-2022","https://github.com/kissge/yo.eki.do/commits/master/notes/tmux-capture-and-save-buffer-2022.md",["Date","2022-04-17T12:25:24.000Z"],{"title":2,"date":13},["Date","2022-04-17T12:25:08.254Z"],[],"\u003Cp>tmux を使っていて、今表示されている画面の内容をコピーしたい、あるいはファイルに保存したいというときに使える方法の話。\u003C/p>\n\u003Cp>以前「\u003Ca href=\"/notes/tmux-capture-and-save-buffer/\" class=\"monolog-link\" >tmux: pane の表示内容をファイルに書き出す\u003C/a>」というメモを自分で書いて、何だかんだいまだに毎月一回以上は自分で見ている。なんで見ているかというと、シェル上で実行するコマンドはヒストリに残るのでそれを参照すればなんとかなるが、tmux コマンドはそうでない場面が多いという理由が大きい。\u003C/p>\n\u003Cp>しかし、よくよく考えると、tmux コマンドもシェル上で実行できることに気づき、いろいろ試した結果、かなり簡略化できた。\u003C/p>\n\u003Cp>つまり、tmux セッションのコピーしたい pane の中でこうすればよい。\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-sh\">tmux capture-pane -pS - &gt; /tmp/hoge\n\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>-p\u003C/code> は出力先をバッファではなく標準出力に指定し、 \u003Ccode>-S -\u003C/code> は pane の先頭から（末尾まで）を対象範囲に指定している。\u003C/p>\n\u003Cp>あるいは、tmux をローカル環境で実行している場合には、こういうこともできる\u003Csup class=\"footnote-link\">\u003Ca href=\"#footnote-1\" id=\"footnote-link-1\">[1]\u003C/a>\u003C/sup>。\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-sh\">\u003Cspan class=\"hljs-comment\"># macOS\u003C/span>\ntmux capture-pane -pS - | pbcopy\n\n\u003Cspan class=\"hljs-comment\"># X\u003C/span>\ntmux capture-pane -pS - | xsel --clipboard\ntmux capture-pane -pS - | xclip -sel clipboard\n\u003C/code>\u003C/pre>\n\u003Cp>色などの情報を落とさずに出力するには、こうする。\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-sh\">tmux capture-pane -epS - &gt; /tmp/hoge\n\u003C/code>\u003C/pre>\n\u003Csection class=\"footnotes\">\u003Col>\u003Cli id=\"footnote-1\">xsel と xclip のどちらがイケてるかについては、諸説あるらしい。 \u003Ca href=\"#footnote-link-1\" title=\"本文にもどる\">↩︎\u003C/a>\u003C/li>\u003C/ol>\u003C/section>","tmux を使っていて、今表示されている画面の内容をコピーしたい、あるいはファイルに保存したいというときに使える方法の話。以前「tmux: pane の表示内容をファイルに書き出す」というメモを自分で書いて、何だかんだいまだに毎月一回以上は自分で見ている。なんで見ているかというと、シェル上で実行するコマンドはヒストリに残るのでそれを参照すればなんとかなるが、tmux コマンドはそうでない場面が多いという理由が大きい。しかし、よくよく考えると、tmux コマンドもシェル上で実行できることに気づき、いろいろ試した結果、かなり簡略化できた。つまり、tmux セッションのコピーしたい pane の中でこうすればよい。tmux capture-pane -pS - &gt; /tmp/hoge -p は出力先をバッファではなく標準出力に指定し、 -S - は pane の先頭から（末尾まで）を対象範囲に指定している。あるいは、tmux をローカル環境で実行している場合には、こういうこともできる[1]。# macOS tmux capture-pane -pS - | pbcopy # X tmux capture-pa",{"to":18,"from":33,"kind":35,"one_hop_tmux: paneの表示内容をファイルに書き出す":37},{"urlPath":9,"entities":19},[20],{"name":21,"nameSegmented":22,"kind":8,"urlPath":25,"historyURL":26,"lastModified":27,"attributes":28,"tags":31,"isEmpty":32},"tmux: paneの表示内容をファイルに書き出す",[23,5,6,24],"tmux: paneの","書き出す","/notes/tmux-capture-and-save-buffer","https://github.com/kissge/yo.eki.do/commits/master/notes/tmux-capture-and-save-buffer.md",["Date","2022-04-17T12:08:43.000Z"],{"from":29,"title":21,"date":30},"wordpress",["Date","2019-06-16T15:00:00.000Z"],[],false,{"urlPath":9,"entities":34},[],{"urlPath":9,"entities":36},[],{"urlPath":25,"entities":38},[]],"uses":{"url":1}}]}
