{"type":"data","nodes":[null,{"type":"data","data":[{"entity":1},{"name":2,"nameSegmented":3,"kind":10,"urlPath":11,"historyURL":12,"lastModified":13,"attributes":14,"tags":16,"body":17,"headline":18,"links":19,"isEmpty":22},"Dockerのdangling volumesを削除したらSSDが177GB空いた",[4,5,6,7,8,9],"Dockerの","dangling volumesを","削除したら","SSDが","177GB","空いた","note","/notes/docker-dangling-volumes","https://github.com/kissge/yo.eki.do/commits/master/notes/docker-dangling-volumes.md",["Date","2023-09-10T08:25:07.000Z"],{"title":2,"date":15},["Date","2023-09-10T08:24:00.000Z"],[],"\u003Cp>最近開発用のLinuxマシンが常時ストレージ不足で困っていた。原因は明らかで、 \u003Ccode>/var/lib/docker/\u003C/code> が200GB以上も占めていた。\u003C/p>\n\u003Cp>しかし、 \u003Ccode>docker system prune\u003C/code> やら \u003Ccode>docker volume prune\u003C/code> やらを実行してもわずかしか余裕が生まれず、ちまちま消せそうなファイルを探して何とか耐えていたが、さすがにきつくなったので真剣に調べたところ、dangling volumesというものが非常に大きな容量を占めていた。dangling volumesというのは（dangling imagesとは違って）単にどのコンテナにもアタッチされていないボリュームのことで、 \u003Ccode>docker system prune\u003C/code> では安全のため削除されない。そしてボリュームというのは、例えばDockerfileに \u003Ccode>VOLUME\u003C/code> が指定されているだけで、そのイメージを使ってコンテナを立ち上げるたびに作成される。通常これはanonymous volumeになる。\u003C/p>\n\u003Cp>\u003Ccode>docker volume prune\u003C/code> でこれらのanonymous dangling volumesを削除することができなかったのは、どうやらDockerの挙動変更のため、古いAPI時代に作られたanonymous volumeは削除されないということらしい。\u003C/p>\n\u003Cblockquote>\n\u003Cp>\u003Ca href=\"https://github.com/docker/cli/issues/4028\">\u003Cstrong>docker/cli#4028\u003C/strong> volumes wont be deleted since update to docker 23\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/docker/cli/issues/4028#issuecomment-1429538131\">cpuguy83 on Feb 8\u003C/a>:\u003C/p>\n\u003Cp>It does mean that upgrading causes volumes which were created prior to 23.0.0 to not be considered for pruning except for when specifying \u003Ccode>--all\u003C/code>.\u003C/p>\n\u003C/blockquote>\n\u003Cp>とにかく、以下のコマンドでリストアップしてみると大量にあることが分かった。\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-bash\">docker volume \u003Cspan class=\"hljs-built_in\">ls\u003C/span> -f dangling=\u003Cspan class=\"hljs-literal\">true\u003C/span> --format json\n\u003C/code>\u003C/pre>\n\u003Cp>なぜかdry-runオプションがないのが嫌だが、 \u003Ccode>docker volume prune --all\u003C/code> (Docker API 1.42～) でこれらのdangling volumesが消せる。（本当にanonymousでないvolumeも消すしかないが、うーん、しょうがないか？　一応mountpointを手動で消すという手はあるが……）\u003C/p>\n\u003Cp>これだけでSSDが177GB空いた。めちゃくちゃびっくりした。\u003C/p>\n","最近開発用のLinuxマシンが常時ストレージ不足で困っていた。原因は明らかで、 /var/lib/docker/ が200GB以上も占めていた。しかし、 docker system prune やら docker volume prune やらを実行してもわずかしか余裕が生まれず、ちまちま消せそうなファイルを探して何とか耐えていたが、さすがにきつくなったので真剣に調べたところ、dangling volumesというものが非常に大きな容量を占めていた。dangling volumesというのは（dangling imagesとは違って）単にどのコンテナにもアタッチされていないボリュームのことで、 docker system prune では安全のため削除されない。そしてボリュームというのは、例えばDockerfileに VOLUME が指定されているだけで、そのイメージを使ってコンテナを立ち上げるたびに作成される。通常これはanonymous volumeになる。docker volume prune でこれらのanonymous dangling volumesを削除することができなかったのは、どうやらDoc",{"to":20},{"urlPath":11,"entities":21},[],false],"uses":{"url":1}}]}
