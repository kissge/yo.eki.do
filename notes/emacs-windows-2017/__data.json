{"entity":{"name":"Emacs: Windowsでやっていく2017","nameSegmented":["Emacs: ","Windowsで","やっていく","2017"],"kind":"note","urlPath":"/notes/emacs-windows-2017","historyURL":"https://github.com/kissge/yo.eki.do/commits/master/notes/emacs-windows-2017.md","lastModified":"2022-06-11T07:33:39.000Z","attributes":{"from":"wordpress","title":"Emacs: Windowsでやっていく2017","date":"2017-12-08T00:00:08.000Z","tags":["アドベントカレンダー"]},"tags":[{"name":"アドベントカレンダー","kind":"tag","urlPath":"/mono/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC"}],"body":"<p>この記事は<a href=\"https://qiita.com/advent-calendar/2017/emacs\">Emacs Advent Calendar 2017</a>の第8日目の記事として書かれました。\n第7日目は<a href=\"https://qiita.com/yynozk\">yynozk</a>さんによる「<a href=\"https://qiita.com/yynozk/items/36a590b49a9237907335\">Emacs の org-mode は表計算もできてしまう</a>」です。\n第9日目は<a href=\"https://qiita.com/tm_tn\">tm_tn</a>さんによる記事の予定です。「何か書きます」とのこと。</p>\n<!--more-->\n\n<p>また騙されてWindowsに戻ってきてしまった。</p>\n<p>先日買ったノートパソコンはMicrosoft Surface Book 2である。\n性能も申し分ないし、タッチスクリーンの完成度は最高。てか267 dpiて。うちにある外付けモニタが馬鹿みたいに見えてしまって逆に困るレベルである。\nとは言え誤算がひとつだけあって、このサーフェスブックにはマッキントッシュは入らないらしい。これでは★一つしかつけられそうにない。\nインタネーットの情報では入ると聞いていたのだが、よくよく見てみるとSurface Bookの話であった。これはSurface Book 2。そのあたりで差が出たのだと思う。</p>\n<p>冗談はさておき、しかしWindowsも悪くないものだ。\nWindows上でEmacsユーザとしてやっていくことに関しては、もう5年以上のキャリアがある。\n昔はUbuntu VM (VirtualBox) とX転送で頑張ったり、前C++とMSBuildでOSを書いていた時は普通にWindows版のGNU Emacsを使ったりしていたが、今回は最近めでたく正式リリースになったWindows Subsystem for Linux (WSL, 通称Bash on Ubuntu on Windows) を使って快適な作業環境を構築したいと思う。</p>\n<h2 id=\"1-wslをセットアップする\">1. WSLをセットアップする</h2>\n<p>WSLが何であるか、どうやってセットアップするかについてはインターネットで検索してもらいたい。\n今回は初めてのインストールなのでBeta版を削除するなどの些細なことは気にしなくて良い。\nとにかくMicrosoft Storeでアプリを導入するのと同じ感覚でUbuntuが使えるようになる。すばらしい。</p>\n<h2 id=\"2-emacsを導入する\">2. Emacsを導入する</h2>\n<p>さて、無事Ubuntu 16.04.3が導入された。早速Emacsを導入したいが、どのバージョンを導入するか考える必要がある。</p>\n<p>Emacs 24で満足できる人は、何も考えずに<code>apt install emacs</code>するだけで無事Emacsが導入できる。</p>\n<p>Emacs 25を導入したい場合は、いろいろ手段はあるがkelleykのPPMを追加するのが一番簡単だろう。</p>\n<pre><code class=\"language-sh\">add-apt-repository ppa:kelleyk/emacs\napt update\napt install emacs25\n</code></pre>\n<p>Emacs 27を導入したいなら、Ubunt Emacs Lisp teamの公開している<a href=\"https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa\">PPM</a>でemacs-snapshotを追加することになるだろうか。\n開発中のバージョンであり高い頻度で更新される。</p>\n<p>Emacs 26を導入するとなると、もうビルドするしかないのではないか？\n幸い最近のWSLはかなり安定してきておりdependencyを正しく導入すると問題なくビルドできる。\nEmacsのソースを管理するgitレポジトリは巨大なのでfetchを最小限に抑えるとかなり時間短縮になる (cf. <a href=\"/notes/git-only-single-commit\" class=\"monolog-link\" sveltekit:prefetch>コミット・タグを指定してその時点でのツリーだけをgit cloneしてくる | 葉月夜堂</a>)。\ndependencyの導入まで合わせて、こんな感じ。\n<x-script src=\"https://gist.github.com/kissge/e925a60437aacac5475673c70bc496e8.js\"></x-script></p>\n<h2 id=\"3-xサーバを導入する\">3. Xサーバを導入する</h2>\n<p>最後にXサーバを導入すると完璧だ。\nもちろんターミナルさえあれば何もいらないというハードコアな諸兄にとっては不要だろう。\nしかし、GUIのほうが使える操作が増えるし使いやすいので個人的にはここまでおすすめしたい。</p>\n<p>以前はXmingのフリー版 (Public Domain Release) かCygwin/Xらへんが定番だったような気がする。\n調べたところVcxsrvかXmingの寄付版 (フリー版はこのソフトウェアの10年前のバージョン) を使うのが今風のようである。\n初めて名前を聞くので今回は<a href=\"https://sourceforge.net/projects/vcxsrv/\">Vcxsrv</a>を導入してみたが、今のところ全く不安定さを感じる場面は無い。\nGitHubを見ると更新が2年止まっているように見えるが、Sourceforgeではかなりアクティブにリリースされているようだ。</p>\n<p><strong>追記 (12/10)</strong>: VcXsrvを起動中にディスプレイの一つを切断するとVcXsrvがクラッシュすることがあるような気がします。</p>\n<p>さて、ここまでセットアップを終えると無事GUI版のEmacsが使えるようになっているはずである。</p>\n<pre><code class=\"language-sh\">DISPLAY=:0 emacs\n</code></pre>\n<figure><img src=\"/images/uploads/2017/12/emacs1.png\" alt=\"\"></figure><p>ここからはもう少し細かいカスタマイズをしていく。</p>\n<h2 id=\"スケーリング設定を切る\">スケーリング設定を切る</h2>\n<p>さて、Surface Book 2はいわゆるhigh-DPIディスプレイである。\nあまりに1ピクセル（ソフトウェアから見た）の寸法（人間の目から見た）が小さすぎるので、工場出荷時にはスケーリングが200%に設定されている。\n一方Vcxsrvは（ざっくり言うと）X転送ということでクライアント (Linux) 側でレンダリングされたビットマップをWindows上で表示するということをしている。\nVcxsrvの描画するウィンドウはWindowsのスケーリングをかけると単に画像が大きくなってしまってあまり見栄えがよろしくない、ということになる（ざっくり言うと）。\nというわけでVcxsrv.exeを適切に設定してこのスケーリング設定を無効化してしまおう。\nまずVcxsrv.exeのプロパティを表示する。ファイル自体は、Vcxsrvへのショートカットを右クリックして “Open file location” するのを繰り返して探し出すか、おそらくは<code>C:\\Program Files\\VcXsrv</code>にあるだろうから直接探す。\nそして “Compatibility” タブの “Override high DPI scaling behavior. Scaling performed by:” の項目を “Application” に変えてしまえばOK。</p>\n<figure><img src=\"/images/uploads/2017/12/emacs4.png\" alt=\"\"></figure><p><strong>追記 (12/10)</strong>: これ、やるのとやらないのでどちらが「きれい」か、あまり自明ではないですね。試行錯誤中です。切るとタイトルバーが馬鹿みたいに大きくなるのが癪なので再び有効にしてみているところ。</p>\n<h2 id=\"いい感じの日本語フォントを導入する\">いい感じの日本語フォントを導入する</h2>\n<p>何もしなくても日本語は表示されるはずである。が、句読点の位置が中国語のそれだったり、ちょっといまいち。\n導入の手軽さもこみでGoogle/Adobe謹製のNotoフォントをおすすめする。\nX転送ってどっちにフォント入れればいいのか忘れるけれど、今どきはとりあえずクライアント (Linux) 側ということになっている。\nというわけでインストールはaptで簡単に。</p>\n<pre><code class=\"language-sh\">apt install fonts-noto-cjk\n</code></pre>\n<p>Emacsのほうはこんな感じで設定を。</p>\n<pre><code class=\"language-lisp\">(<span class=\"hljs-name\">set-fontset-font</span> <span class=\"hljs-string\">&quot;fontset-default&quot;</span> &#x27;japanese-jisx0208 &#x27;(<span class=\"hljs-string\">&quot;Noto Sans CJK JP Medium&quot;</span> . <span class=\"hljs-string\">&quot;iso10646-1&quot;</span>))\n</code></pre>\n<h2 id=\"日本語入力\">日本語入力</h2>\n<p>表示ときたら次は入力。\n今回も使い慣れたmozc (Google日本語入力のオープンソース版)　とemacs-mozc-binでいく。\nまずターミナルでサーバをインストールする。</p>\n<pre><code class=\"language-sh\">apt install emacs-mozc-bin\n</code></pre>\n<p>Emacs側ではまず<a href=\"https://raw.githubusercontent.com/google/mozc/master/src/unix/emacs/mozc.el\">mozc.el</a>を手に入れ、<code>load-path</code>の通っているディレクトリに置く。\nそして</p>\n<pre><code class=\"language-lisp\">(<span class=\"hljs-name\">setq</span> default-input-method <span class=\"hljs-string\">&quot;japanese-mozc&quot;</span>)\n(<span class=\"hljs-name\">require</span> &#x27;mozc)\n</code></pre>\n<p>あとは<code>M-x toggle-input-method</code>でIMEのオンオフが切り替えられる。好みに応じて<code>global-set-key</code>しておこう。\nちなみに全角半角キーは<code>(kbd &quot;&lt;zenkaku-hankaku&gt;&quot;)</code>で指定できる。</p>\n<p>蛇足だが個人的に気に入っているのでgnome-terminalも導入した（めちゃくちゃdependencyが多かった）。\nこちらの日本語入力はいつものUbuntuと同じとはいかない。\n残念ながらibusはうまく動かないようである。\n今回は妥協してuim-fepとanthyを使うことにした。\nこんな感じでターミナルの一番下の行を1行占領してしまうが、しょうがない。</p>\n<figure><img src=\"/images/uploads/2017/12/emacs2.png\" alt=\"\"></figure><p>gnome-terminalの設定で、起動するシェルをuim-fepにしておこう。\n.bashrcで呼び出すように設定しても良いが、二重起動しないようにいろいろ頭を使うのが面倒だった。\nEmacsの<code>shell</code>などで起動しないで欲しいという理由もある。</p>\n<h2 id=\"windowsから直接emacsを起動する\">Windowsから直接Emacsを起動する</h2>\n<p>さて、毎回Emacsを起動するためにWSLのターミナルを呼び出すのは面倒くさい。\nWindowsからWSL上のコマンドを実行するのは簡単だ。\nWindows + Rキーで開くファイル名を指定して実行 (Run) ダイアログなどからbashを呼び出すだけで良い。</p>\n<pre><code class=\"language-sh\">bash -c <span class=\"hljs-string\">&quot;DISPLAY=:0 emacs&quot;</span>\n</code></pre>\n<p>しかし、これだと「黒画面」が表示しっぱなしになってしまう。\nEmacsが終了するまでbash.exeのウィンドウが裏に表示されたままになってしまうのである。\nそこでひと工夫加えてこうすれば良い。</p>\n<pre><code class=\"language-sh\">bash -c <span class=\"hljs-string\">&quot;DISPLAY=:0 emacs &amp;&quot;</span>\n</code></pre>\n<p>良い……んじゃないかと思う。自分のショートカット見たらこれじゃなくてrun.exe使ってて、あれ、&amp;じゃダメな理由あったんだっけ……忘れた……。</p>\n<p>ついでに、起動時のデフォルトディレクトリが変なディレクトリになって気に入らないので<code>bash -c &quot;cd; DISPLAY=:0 emacs &amp;&quot;</code>などとしてしまっても良い。</p>\n<p>言うまでもないことだがGUIウィンドウを使いたければXサーバが立っている必要がある。\nWindowsの起動時に自動で起動するようにするのが簡単だろう。\nエクスプローラのアドレスバーで<code>shell:startup</code>と指定すると開くディレクトリにVcxsrvへのショートカットを置くだけである。</p>\n<h2 id=\"もちろんtramp-modeも使え\">もちろんtramp-modeも使え……</h2>\n<p>これで概ね開発環境は整った！\nあとはSSHの設定を適切に行いいつものようにtramp-modeで開発用のLinuxサーバのファイルを編集するだけである (cf. <a href=\"/notes/tramp-mode\" class=\"monolog-link\" sveltekit:prefetch>Emacs: まだターミナルで消耗してるの？ | 葉月夜堂</a>)。</p>\n<p>が、ここで重大な問題が発生する。</p>\n<p>tramp-modeを使ってリモートファイルを編集し保存しようとすると、”Decoding remote file `xxxx’ using `xxxx’” のところでEmacsがハングしてしまうのである。\nおまけに編集中のファイルは消滅してしまう。最悪だ。</p>\n<p>うーん…………。\nWSL, sshfsもまだ使えないみたいだし……。</p>\n<p>うーん…………。</p>\n<p>Emacsやめるか……。</p>\n<p>　\n　\n　\n　\n　\n　</p>\n<p>というわけで他のエディタを導入してみる。\n実を言うと時代遅れのEmacsなんてはやく辞めたかったのである。\n時代はElectron製イケてるエディタやな！！</p>\n<p>　\n　\n　\n　\n　\n　</p>\n<p>が、やっぱりダメ。\nエディタを起動したらまず<code>find-file</code>したい。\nGUIのファイルオープンダイアログなんか使いたくない。\nプロジェクトにファイルがありませんじゃない。IDEじゃなくてエディタが欲しいんだよ。</p>\n<p>てかリモートファイル編集がないって何？&#128162;\nファイルをダウンロードして編集して保存してアップロードするのか？sshしてターミナルで操作の限定された状況でファイルを編集するのか？サーバを立てるごとに環境構築して？\n21世紀なのに？え？</p>\n<p>というわけでやっぱりEmacsを使うしか無い（個人の感想です）という結論に。\n個人の感想ですよ。\nAtomの<a href=\"https://atom.io/packages/ftp-remote-edit\">ftp-remote-edit</a>はいい線いってると思いますよ。</p>\n<p>　\n　\n　\n　\n　\n　</p>\n<p>ともかく気を取り直して頑張ってtramp-modeをデバッグする。\nどうやらEmacs 25, 26, 27いずれも同様の問題があるらしいことがわかった。\n（蛇足だがEmacs 26, 27だとGUIで文字が描画されず使い物にならなかった……gtk+ 2, 3両方試してもダメ。あとtrampもファイルを開くたびになんかエラー出る）</p>\n<p>基本通りedebugをアタッチしてみると、<code>process-send-string</code>でbase64エンコードした文字列を送りリモートシェルでデコードする部分で処理が止まってしまうことがわかる。\nこの問題は比較的小さいファイルを編集するときには起きないようだ。\nそこで、一回に送る文字列の長さを制限してみる。</p>\n<pre><code class=\"language-lisp\">(<span class=\"hljs-name\">custom-set-variables</span> &#x27;(tramp-chunksize <span class=\"hljs-number\">1024</span>))\n</code></pre>\n<p>数字は適当である。\nが、これがうまくいった。\nとりあえず今のところ問題は再発していない（10240はダメだった）。</p>\n<p>一応<code>tramp-chunksize</code>をいじるのはWSL上だけに制限しておこう。\nWSLかどうか判定するのはこういう感じで。</p>\n<pre><code class=\"language-lisp\">(<span class=\"hljs-name\">string-match-p</span> <span class=\"hljs-string\">&quot;Microsoft&quot;</span> (<span class=\"hljs-name\">shell-command-to-string</span> <span class=\"hljs-string\">&quot;uname -r&quot;</span>))\n</code></pre>\n<p>というわけでどうにか開発環境として日常的に使えるように出来た。\nこれがEmacsの問題だったのかtramp-modeなのかWSLなのか、よくわからない。どこかに報告したほうがいいのかもしれない。\nいずれにせよこれでコードが書ける。\nよかった。</p>\n<p>大変なこともあったけど、2017年現在、Windowsでやっていけそうです。\nしかも（一応）案外簡単に。</p>\n<figure><img src=\"/images/uploads/2017/12/emacs3.png\" alt=\"\"></figure><p>またEmacsを卒業しそびれてしまったねえ。</p>\n","headline":"この記事はEmacs Advent Calendar 2017の第8日目の記事として書かれました。第7日目はyynozkさんによる「Emacs の org-mode は表計算もできてしまう」です。第9日目はtm_tnさんによる記事の予定です。「何か書きます」とのこと。また騙されてWindowsに戻ってきてしまった。先日買ったノートパソコンはMicrosoft Surface Book 2である。性能も申し分ないし、タッチスクリーンの完成度は最高。てか267 dpiて。うちにある外付けモニタが馬鹿みたいに見えてしまって逆に困るレベルである。とは言え誤算がひとつだけあって、このサーフェスブックにはマッキントッシュは入らないらしい。これでは★一つしかつけられそうにない。インタネーットの情報では入ると聞いていたのだが、よくよく見てみるとSurface Bookの話であった。これはSurface Book 2。そのあたりで差が出たのだと思う。冗談はさておき、しかしWindowsも悪くないものだ。Windows上でEmacsユーザとしてやっていくことに関しては、もう5年以上のキャリアがある。昔はUbuntu VM (Vi","links":{"to":{"urlPath":"/notes/emacs-windows-2017","entities":[{"name":"アドベントカレンダー","nameSegmented":["アドベントカレンダー"],"kind":"tag","urlPath":"/mono/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC","tags":[]},{"name":"Emacs: まだターミナルで消耗してるの？","nameSegmented":["Emacs: まだ","ターミナルで","消耗してるの？"],"kind":"note","urlPath":"/notes/tramp-mode","historyURL":"https://github.com/kissge/yo.eki.do/commits/master/notes/tramp-mode.md","lastModified":"2022-06-11T07:33:39.000Z","attributes":{"from":"wordpress","title":"Emacs: まだターミナルで消耗してるの？","date":"2015-12-04T23:00:02.000Z","tags":["アドベントカレンダー"]},"tags":[{"name":"アドベントカレンダー","kind":"tag","urlPath":"/mono/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC"}]},{"name":"コミット・タグを指定してその時点でのツリーだけをgit cloneしてくる","nameSegmented":["コミット・タグを","指定して","その","時点での","ツリーだけを","git ","cloneしてくる"],"kind":"note","urlPath":"/notes/git-only-single-commit","historyURL":"https://github.com/kissge/yo.eki.do/commits/master/notes/git-only-single-commit.md","lastModified":"2022-04-17T12:08:43.000Z","attributes":{"from":"wordpress","title":"コミット・タグを指定してその時点でのツリーだけをgit cloneしてくる","date":"2015-11-10T20:03:33.000Z"},"tags":[]}]},"from":{"urlPath":"/notes/emacs-windows-2017","entities":[]},"kind":{"urlPath":"/notes/emacs-windows-2017","entities":[]},"one_hop_アドベントカレンダー":{"urlPath":"/mono/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC","entities":[{"name":"PDFと、出版社と、私","nameSegmented":["PDFと、","出版社と、","私"],"kind":"note","urlPath":"/notes/pdf-publisher-and-me","historyURL":"https://github.com/kissge/yo.eki.do/commits/master/notes/pdf-publisher-and-me.md","lastModified":"2022-06-11T07:33:39.000Z","attributes":{"title":"PDFと、出版社と、私","date":"2021-12-23T05:00:00.000Z","tags":["アドベントカレンダー"]},"tags":[{"name":"アドベントカレンダー","kind":"tag","urlPath":"/mono/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC"}]},{"name":"リーガルリサーチシステム「Legalscape」の技術スタック2021","nameSegmented":["リーガルリサーチシステム","「Legalscape」の","技術スタック","2021"],"kind":"note","urlPath":"/notes/legalscape-tech-stack","historyURL":"https://github.com/kissge/yo.eki.do/commits/master/notes/legalscape-tech-stack.md","lastModified":"2022-06-11T07:33:39.000Z","attributes":{"title":"リーガルリサーチシステム「Legalscape」の技術スタック2021","date":"2021-12-02T00:00:00.000Z","tags":["アドベントカレンダー"]},"tags":[{"name":"アドベントカレンダー","kind":"tag","urlPath":"/mono/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC"}]},{"name":"来年こそは届いてほしいスマートグラス「Vue」","nameSegmented":["来年","こそは","届いて","ほしい","スマートグラス","「Vue」"],"kind":"note","urlPath":"/notes/crowdfunding-vue","historyURL":"https://github.com/kissge/yo.eki.do/commits/master/notes/crowdfunding-vue.md","lastModified":"2022-06-11T07:34:19.000Z","attributes":{"from":"wordpress","title":"来年こそは届いてほしいスマートグラス「Vue」","date":"2018-12-13T00:17:07.000Z","tags":["アドベントカレンダー"]},"tags":[{"name":"アドベントカレンダー","kind":"tag","urlPath":"/mono/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC"}]},{"name":"Emacs: まだターミナルで消耗してるの？","nameSegmented":["Emacs: まだ","ターミナルで","消耗してるの？"],"kind":"note","urlPath":"/notes/tramp-mode","historyURL":"https://github.com/kissge/yo.eki.do/commits/master/notes/tramp-mode.md","lastModified":"2022-06-11T07:33:39.000Z","attributes":{"from":"wordpress","title":"Emacs: まだターミナルで消耗してるの？","date":"2015-12-04T23:00:02.000Z","tags":["アドベントカレンダー"]},"tags":[{"name":"アドベントカレンダー","kind":"tag","urlPath":"/mono/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC"}]},{"name":"Emacs: re-builder + foreign-regexp.elでたのしい正規表現","nameSegmented":["Emacs: ","re","-builder"," +"," foreign","-regexp.","elで","たのしい","正規表現"],"kind":"note","urlPath":"/notes/foreign-regexp-el","historyURL":"https://github.com/kissge/yo.eki.do/commits/master/notes/foreign-regexp-el.md","lastModified":"2022-06-11T07:52:23.000Z","attributes":{"from":"wordpress","title":"Emacs: re-builder + foreign-regexp.elでたのしい正規表現","date":"2014-12-19T23:30:53.000Z","tags":["アドベントカレンダー"]},"tags":[{"name":"アドベントカレンダー","kind":"tag","urlPath":"/mono/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC"}]}]},"one_hop_Emacs: まだターミナルで消耗してるの？":{"urlPath":"/notes/tramp-mode","entities":[]},"one_hop_コミット・タグを指定してその時点でのツリーだけをgit cloneしてくる":{"urlPath":"/notes/git-only-single-commit","entities":[]}}}}